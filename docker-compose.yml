version: '3.8'

networks:
  zeropoint-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # Main API Service
  zeropoint-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: zeropoint-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - ZEROPOINT_SERVICE_URL=http://zeropoint:8000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=zeropoint
      - DB_PASS=zeropointpass
      - DB_NAME=zeropointdb
      - JWT_SECRET=${JWT_SECRET:-supersecret}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - THROTTLE_TTL=${THROTTLE_TTL:-60000}
      - THROTTLE_LIMIT=${THROTTLE_LIMIT:-20}
    depends_on:
      postgres:
        condition: service_healthy
      zeropoint:
        condition: service_healthy
    networks:
      - zeropoint-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/v1/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - ./logs:/app/logs
      - ./src/scripts/database-setup.sql:/docker-entrypoint-initdb.d/01-setup.sql:ro
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Python Backend Service
  zeropoint:
    build:
      context: ./Zeropoint
      dockerfile: Dockerfile
    container_name: zeropoint-service
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - CACHE_DIR=/app/cache
      - IPFS_API=/ip4/127.0.0.1/tcp/5001
      - TEXT_MODEL_NAME=bigscience/bloom-petals
      - IMAGE_MODEL_NAME=runwayml/stable-diffusion-v1-5
    volumes:
      - ./Zeropoint/cache:/app/cache
      - ./Zeropoint/logs:/app/logs
    networks:
      - zeropoint-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: zeropoint-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=zeropoint
      - POSTGRES_PASSWORD=zeropointpass
      - POSTGRES_DB=zeropointdb
      - POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      - PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    networks:
      - zeropoint-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/scripts/database-setup.sql:/docker-entrypoint-initdb.d/01-setup.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zeropoint -d zeropointdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: zeropoint-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispass
    ports:
      - "6379:6379"
    networks:
      - zeropoint-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    container_name: zeropoint-ipfs
    restart: unless-stopped
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/ipfs
      - ipfs_staging:/export
    environment:
      - IPFS_PROFILE=server
    networks:
      - zeropoint-network
    healthcheck:
      test: ["CMD", "ipfs", "dag", "stat", "/ipfs/QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: zeropoint-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - zeropoint-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - zeropoint-api
      - zeropoint
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: zeropoint-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - prometheus
    networks:
      - zeropoint-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: zeropoint-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - zeropoint-api
      - zeropoint
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

volumes:
  postgres_data:
  redis_data:
  ipfs_data:
  ipfs_staging:
  prometheus_data:
  grafana_data: 