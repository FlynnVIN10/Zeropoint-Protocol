name: CTO Verification Gate

on:
  push:
    paths:
      - 'PM_STATUS_REPORT.md'
  issue_comment:
    types: [created]

permissions:
  contents: read
  deployments: write
  pull-requests: write

jobs:
  cto-verification:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/verify'))
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build platform
        run: npm run build

      - name: Test platform endpoints
        run: |
          echo "Testing platform health endpoints..."
          
          # Start platform in background
          npm run start:prod &
          PLATFORM_PID=$!
          
          # Wait for platform to start
          sleep 10
          
          # Test health endpoints
          echo "Testing /v1/health/healthz..."
          curl -f -s http://localhost:3000/v1/health/healthz > /dev/null && echo "✅ /healthz: OK" || echo "❌ /healthz: FAILED"
          
          echo "Testing /v1/health/readyz..."
          curl -f -s http://localhost:3000/v1/health/readyz > /dev/null && echo "✅ /readyz: OK" || echo "❌ /readyz: FAILED"
          
          echo "Testing /v1/health/status/version.json..."
          curl -f -s http://localhost:3000/v1/health/status/version.json > /dev/null && echo "✅ /status/version.json: OK" || echo "❌ /status/version.json: FAILED"
          
          # Stop platform
          kill $PLATFORM_PID

      - name: Checkout website repo
        uses: actions/checkout@v4
        with:
          repository: FlynnVIN10/Zeropoint-Protocol
          path: ./website

      - name: Setup Node.js for website
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./website/package-lock.json

      - name: Install website dependencies
        working-directory: ./website
        run: npm ci

      - name: Build website
        working-directory: ./website
        run: npm run build

      - name: Verify Cloudflare Project Name
        run: |
          echo "Verifying Cloudflare Pages project name..."
          
          # Get the list of Pages projects
          PROJECTS_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects")
          
          echo "API Response: $PROJECTS_RESPONSE"
          
          # Extract project names
          PROJECT_NAMES=$(echo "$PROJECTS_RESPONSE" | jq -r '.result[]?.name // empty')
          
          echo "Available project names: $PROJECT_NAMES"
          
          # Check if our expected project exists
          if echo "$PROJECT_NAMES" | grep -q "zeropointprotocol-ai"; then
            echo "✅ Project 'zeropointprotocol-ai' found"
            echo "PROJECT_NAME=zeropointprotocol-ai" >> $GITHUB_ENV
          elif echo "$PROJECT_NAMES" | grep -q "zeropointprotocol.ai"; then
            echo "✅ Project 'zeropointprotocol.ai' found"
            echo "PROJECT_NAME=zeropointprotocol.ai" >> $GITHUB_ENV
          elif echo "$PROJECT_NAMES" | grep -q "zeropointprotocol"; then
            echo "✅ Project 'zeropointprotocol' found"
            echo "PROJECT_NAME=zeropointprotocol" >> $GITHUB_ENV
          else
            echo "❌ Expected project not found. Available projects:"
            echo "$PROJECT_NAMES"
            echo "PROJECT_NAME=zeropointprotocol-ai" >> $GITHUB_ENV  # fallback
          fi
          
          # Save project info for evidence pack
          echo "$PROJECTS_RESPONSE" > cloudflare-projects.json

      - name: Deploy to Cloudflare Pages (Preview)
        working-directory: ./website
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ env.PROJECT_NAME }}
          directory: build
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for deployment
        run: sleep 30

      - name: Smoke Tests
        run: |
          echo "Running smoke tests..."
          
          # Test website endpoints
          echo "Testing website homepage..."
          curl -f -s https://zeropointprotocol.ai > /dev/null && echo "✅ Homepage: OK" || echo "❌ Homepage: FAILED"
          
          echo "Testing website robots.txt..."
          curl -f -s https://zeropointprotocol.ai/robots.txt > /dev/null && echo "✅ robots.txt: OK" || echo "❌ robots.txt: FAILED"
          
          echo "Testing website sitemap.xml..."
          curl -f -s https://zeropointprotocol.ai/sitemap.xml > /dev/null && echo "✅ sitemap.xml: OK" || echo "❌ sitemap.xml: FAILED"
          
          # Test platform endpoints (if accessible)
          echo "Testing platform healthz..."
          curl -f -s http://localhost:3000/v1/health/healthz > /dev/null && echo "✅ Platform /healthz: OK" || echo "❌ Platform /healthz: FAILED"
          
          echo "Testing platform status/version.json..."
          curl -f -s http://localhost:3000/v1/health/status/version.json > /dev/null && echo "✅ Platform /status/version.json: OK" || echo "❌ Platform /status/version.json: FAILED"

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        working-directory: ./website
        run: |
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: |
            ./website/.lighthouseci/
            cloudflare-projects.json

      - name: Generate verification report
        run: |
          echo "# CTO Verification Report" > verification-report.md
          echo "" >> verification-report.md
          echo "**Date:** $(date)" >> verification-report.md
          echo "**Commit:** ${{ github.sha }}" >> verification-report.md
          echo "**Trigger:** ${{ github.event_name }}" >> verification-report.md
          echo "" >> verification-report.md
          
          echo "## Smoke Test Results" >> verification-report.md
          echo "" >> verification-report.md
          
          # Capture smoke test results
          if curl -f -s https://zeropointprotocol.ai > /dev/null; then
            echo "✅ Homepage: OK" >> verification-report.md
          else
            echo "❌ Homepage: FAILED" >> verification-report.md
          fi
          
          if curl -f -s https://zeropointprotocol.ai/robots.txt > /dev/null; then
            echo "✅ robots.txt: OK" >> verification-report.md
          else
            echo "❌ robots.txt: FAILED" >> verification-report.md
          fi
          
          if curl -f -s https://zeropointprotocol.ai/sitemap.xml > /dev/null; then
            echo "✅ sitemap.xml: OK" >> verification-report.md
          else
            echo "❌ sitemap.xml: FAILED" >> verification-report.md
          fi
          
          if curl -f -s http://localhost:3000/v1/health/healthz > /dev/null; then
            echo "✅ Platform /healthz: OK" >> verification-report.md
          else
            echo "❌ Platform /healthz: FAILED" >> verification-report.md
          fi
          
          if curl -f -s http://localhost:3000/v1/health/status/version.json > /dev/null; then
            echo "✅ Platform /status/version.json: OK" >> verification-report.md
          else
            echo "❌ Platform /status/version.json: FAILED" >> verification-report.md
          fi
          
          echo "" >> verification-report.md
          echo "## Lighthouse Results" >> verification-report.md
          echo "" >> verification-report.md
          echo "Lighthouse reports uploaded to artifacts." >> verification-report.md
          
          echo "" >> verification-report.md
          echo "## Checklist" >> verification-report.md
          echo "" >> verification-report.md
          echo "- [ ] All smoke tests pass" >> verification-report.md
          echo "- [ ] Lighthouse scores ≥80 (Performance, Accessibility, Best Practices, SEO)" >> verification-report.md
          echo "- [ ] No console errors" >> verification-report.md
          echo "- [ ] All key routes accessible" >> verification-report.md
          echo "- [ ] Deployment successful" >> verification-report.md
          echo "- [ ] Platform health endpoints responding" >> verification-report.md
          echo "- [ ] Status/version.json accessible" >> verification-report.md

      - name: Upload verification report
        uses: actions/upload-artifact@v4
        with:
          name: verification-report
          path: verification-report.md

      - name: Post verification comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('verification-report.md', 'utf8');
            
            // Determine if verification passed
            const smokeTestsPassed = report.includes('✅ Homepage: OK') && 
                                   report.includes('✅ robots.txt: OK') && 
                                   report.includes('✅ sitemap.xml: OK');
            
            const status = smokeTestsPassed ? '✅ PASS' : '❌ FAIL';
            const statusEmoji = smokeTestsPassed ? '✅' : '❌';
            
            const comment = '## ' + statusEmoji + ' CTO Verification Gate - ' + status + '\n\n' + report + '\n\n**@OCEAN** - Please review the verification results above.\n\n**Live Site:** https://zeropointprotocol.ai\n**Platform Health:** http://localhost:3000/v1/health/healthz\n**Status/Version:** http://localhost:3000/v1/health/status/version.json\n**GitHub Actions:** ' + context.serverUrl + '/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId + '\n**Artifacts:** Available in this workflow run\n\n**Next Steps:**\n- [ ] Review smoke test results\n- [ ] Check Lighthouse scores\n- [ ] Verify deployment status\n- [ ] Approve or request changes';
            
            if (context.eventName === 'issue_comment') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              // For push events, create a new issue with the verification results
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'CTO Verification Gate - ' + status + ' - ' + new Date().toISOString(),
                body: comment,
                labels: ['cto-verification', 'deployment']
              });
            }
