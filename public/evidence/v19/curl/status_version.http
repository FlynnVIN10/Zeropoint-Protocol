HTTP/2 200 
date: Tue, 02 Sep 2025 01:09:44 GMT
content-type: text/html; charset=utf-8
access-control-allow-origin: *
cache-control: public, max-age=300
content-disposition: inline
strict-transport-security: max-age=31536000; includeSubDomains; preload, max-age=31536000; includeSubDomains; preload
content-security-policy: default-src 'self'; connect-src 'self'; img-src 'self' data:; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-ancestors 'none'; base-uri 'self'; upgrade-insecure-requests
content-security-policy: default-src 'self'; connect-src 'self'; img-src 'self' data:; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-ancestors 'none'; base-uri 'self'; upgrade-insecure-requests
permissions-policy: accelerometer=(), autoplay=(), camera=(), clipboard-read=(), clipboard-write=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()
permissions-policy: accelerometer=(), autoplay=(), camera=(), clipboard-read=(), clipboard-write=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()
referrer-policy: strict-origin-when-cross-origin
referrer-policy: strict-origin-when-cross-origin
x-content-type-options: nosniff
x-content-type-options: nosniff
x-frame-options: DENY
vary: accept-encoding
report-to: {"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=3C4BzOxzAKtZk3U2ToRcDDS%2BU29t%2BV41JEttoS73%2Bn4FjZ9JVrjf%2BbP1gkwvr5Za%2FVRTECFfUOvKje4yealK3I3NIoFEX%2BOtrWua2r7OPrISvF%2BK"}]}
nel: {"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}
server: cloudflare
cf-cache-status: DYNAMIC
cf-ray: 97891fa75a5208ab-LAX
alt-svc: h3=":443"; ma=86400

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zeropoint Protocol</title>
    <meta name="description" content="Zeropoint Protocol: Dual-Consensus Agentic AI Platform with ethical governance and verified evidence.">
    <style>
      :root { --bg:#1e1e1e; --fg:#f0f0f0; --accent:#6e00ff; }
      html,body{margin:0;padding:0;min-height:100%;background:var(--bg);color:var(--fg);font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif}
      .container{max-width:100%;width:100%;margin:0;padding:0}
      h1{margin:0 0 8px 0}
      p{opacity:.9}
      .links{display:flex;flex-wrap:wrap;gap:12px;margin-top:16px}
      .btn{border:1px solid var(--accent);padding:10px 14px;border-radius:8px;color:var(--fg);text-decoration:none}
      .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:16px;margin-top:24px}
      .card{border:1px solid #333;border-radius:10px;padding:16px;background:#111}
      .muted{color:#bbb;font-size:.9em}
      
      /* Panel Layout */
      .panel-container {
        display: flex;
        min-height: calc(100vh - 80px);
        width: 100%;
        overflow: hidden;
      }
      
      .left-panel {
        width: 20rem;
        border-right: 1px solid #333;
        padding: 16px;
        flex-shrink: 0;
        overflow-y: auto;
        background: #111;
      }
      
      .center-panel {
        flex: 1 1 auto;
        padding: 16px;
        min-width: 0;
        display: flex;
        flex-direction: column;
        overflow: hidden;
      }
      
      .right-panel {
        width: 24rem;
        border-left: 1px solid #333;
        padding: 16px;
        flex-shrink: 0;
        overflow-y: auto;
        background: #111;
      }
      
      /* Center Panel Content */
      .center-content {
        flex: 1;
        overflow-y: auto;
        margin-bottom: 16px;
        padding-right: 8px;
      }
      
      .response-text {
        white-space: pre-wrap;
        word-wrap: break-word;
        line-height: 1.5;
        margin-bottom: 16px;
        color: #f0f0f0;
      }
      
      .prompt-input-container {
        margin-top: auto;
        padding-top: 16px;
        border-top: 1px solid #333;
      }
      
      .prompt-input {
        width: 100%;
        padding: 12px;
        border-radius: 8px;
        border: 1px solid #444;
        background: #111;
        color: #f0f0f0;
        font-family: inherit;
        box-sizing: border-box;
        margin: 0;
      }
      
      /* Scrollbar Styling */
      .left-panel::-webkit-scrollbar,
      .right-panel::-webkit-scrollbar,
      .center-content::-webkit-scrollbar {
        width: 8px;
      }
      
      .left-panel::-webkit-scrollbar-track,
      .right-panel::-webkit-scrollbar-track,
      .center-content::-webkit-scrollbar-track {
        background: #333;
      }
      
      .left-panel::-webkit-scrollbar-thumb,
      .right-panel::-webkit-scrollbar-thumb,
      .center-content::-webkit-scrollbar-thumb {
        background: #666;
        border-radius: 4px;
      }
      
      .left-panel::-webkit-scrollbar-thumb:hover,
      .right-panel::-webkit-scrollbar-thumb:hover,
      .center-content::-webkit-scrollbar-thumb:hover {
        background: #888;
      }
    </style>
</head>
<body>
  <div class="container" style="padding:0; width:100vw; max-width:100vw;">
    <div id="top-ticker" style="white-space:nowrap; overflow:hidden; border-bottom:1px solid #333; padding:8px 12px"></div>
    
    <div class="panel-container">
      <aside class="left-panel">
        <h3 style="margin-top:0">Consensus Queue</h3>
        <div id="consensus-queue" class="muted">Synthiant proposals will appear here.</div>
      </aside>
      
      <main class="center-panel">
        <h1 style="margin-top:0">Zeropoint Protocol</h1>
        
        <div class="center-content">
          <div id="response-area" class="response-text"></div>
        </div>
        
        <div class="prompt-input-container">
          <form id="prompt-form">
            <input id="prompt" type="text" placeholder="Ask..." class="prompt-input" />
          </form>
          <div class="muted" id="telemetry" style="margin-top:8px;"></div>
        </div>
      </main>
      
      <aside class="right-panel">
        <h3 style="margin-top:0">Training</h3>
        <dl>
          <div><dt class="muted">Active Runs</dt><dd id="ts-active-runs" class="font-mono"></dd></div>
          <div><dt class="muted">Completed Today</dt><dd id="ts-completed-today" class="font-mono"></dd></div>
          <div><dt class="muted">Total Runs</dt><dd id="ts-total-runs" class="font-mono"></dd></div>
          <div><dt class="muted">Last Run Model</dt><dd id="ts-last-model" class="font-mono"></dd></div>
          <div><dt class="muted">Last Run Accuracy</dt><dd id="ts-last-accuracy" class="font-mono"></dd></div>
          <div><dt class="muted">Last Run Loss</dt><dd id="ts-last-loss" class="font-mono"></dd></div>
          <div><dt class="muted">Commit</dt><dd id="ts-commit" class="font-mono"></dd></div>
          <div><dt class="muted">Last Update</dt><dd id="ts-timestamp" class="font-mono"></dd></div>
        </dl>
        
        <h4 style="margin-top:16px;margin-bottom:8px;color:#6e00ff">Leaderboard</h4>
        <div id="ts-leaderboard" style="font-size:0.9em;"></div>
      </aside>
    </div>
    
    <div id="bottom-ticker" style="white-space:nowrap; overflow:hidden; border-top:1px solid #333; padding:8px 12px"></div>
  </div>

  <script>
    // SSE Tickers
    function marquee(el, text) {
      const span = document.createElement('span');
      span.textContent = ' ' + text + ' ';
      span.style.paddingRight = '24px';
      el.appendChild(span);
      el.scrollLeft = el.scrollWidth; // keep right-to-left effect
    }
    try {
      const top = new EventSource('/api/events/consensus');
      top.addEventListener('consensus', (e) => {
        const d = JSON.parse(e.data);
        marquee(document.getElementById('top-ticker'), `[consensus] ${d.state} #${d.seq} ${d.ts}`);
      });
    } catch {}
    try {
      const bottom = new EventSource('/api/events/synthiant');
      bottom.addEventListener('tick', (e) => {
        const d = JSON.parse(e.data);
        marquee(document.getElementById('bottom-ticker'), `[synthiant] ${d.msg} #${d.seq} ${d.ts}`);
      });
    } catch {}

    // Prompt routing
    const form = document.getElementById('prompt-form');
    form.addEventListener('submit', async (ev) => {
      ev.preventDefault();
      const q = document.getElementById('prompt').value.trim();
      if (!q) return;
      
      // Clear previous response
      document.getElementById('response-area').textContent = '';
      
      // Show loading indicator
      document.getElementById('telemetry').textContent = 'Processing...';
      
      try {
        const r = await fetch('/api/router/exec.json?q=' + encodeURIComponent(q), { cache: 'no-store' });
        const j = await r.json().catch(() => ({}));
        
        // Display response in the flowing text area
        document.getElementById('response-area').textContent = j.response || 'No response received';
        
        // Show telemetry
        const t = j.telemetry || {};
        document.getElementById('telemetry').textContent = `provider=${t.provider||'unknown'} instance=${t.instance||'none'} latency=${t.latencyMs||'-'}ms`;
        
        // Clear input
        document.getElementById('prompt').value = '';
        
        // Scroll to bottom of response area
        const responseArea = document.getElementById('response-area');
        responseArea.scrollTop = responseArea.scrollHeight;
      } catch (error) {
        document.getElementById('response-area').textContent = 'Error: ' + error.message;
        document.getElementById('telemetry').textContent = 'Request failed';
      }
    });

    // Training panel fetch
    async function loadTraining() {
      try {
        console.log('Loading training data...');
        const r = await fetch('/api/training/status', { cache: 'no-store' });
        console.log('Response status:', r.status);
        if (!r.ok) throw new Error(String(r.status));
        const d = await r.json();
        console.log('Training data received:', d);
        
        // Update training metrics
        document.getElementById('ts-active-runs').textContent = d.active_runs || '0';
        document.getElementById('ts-completed-today').textContent = d.completed_today || '0';
        document.getElementById('ts-total-runs').textContent = d.total_runs || '0';
        
        // Update last run details
        if (d.last_run) {
          document.getElementById('ts-last-model').textContent = d.last_run.model || 'N/A';
          document.getElementById('ts-last-accuracy').textContent = d.last_run.metrics?.accuracy ? 
            (d.last_run.metrics.accuracy * 100).toFixed(1) + '%' : 'N/A';
          document.getElementById('ts-last-loss').textContent = d.last_run.metrics?.loss ? 
            d.last_run.metrics.loss.toFixed(4) : 'N/A';
        } else {
          document.getElementById('ts-last-model').textContent = 'N/A';
          document.getElementById('ts-last-accuracy').textContent = 'N/A';
          document.getElementById('ts-last-loss').textContent = 'N/A';
        }
        
        document.getElementById('ts-commit').textContent = d.commit || 'N/A';
        document.getElementById('ts-timestamp').textContent = d.timestamp ? 
          new Date(d.timestamp).toLocaleString() : 'N/A';

        // Update leaderboard
        const leaderboardDiv = document.getElementById('ts-leaderboard');
        leaderboardDiv.innerHTML = ''; // Clear previous content
        if (d.leaderboard && d.leaderboard.length > 0) {
          leaderboardDiv.innerHTML = '<strong>Top Models:</strong><br>';
          d.leaderboard.forEach(item => {
            leaderboardDiv.innerHTML += `#${item.rank} ${item.model} (${(item.accuracy * 100).toFixed(1)}%) - ${item.runs} runs<br>`;
          });
        } else {
          leaderboardDiv.textContent = 'No leaderboard data available.';
        }
      } catch (e) {
        document.getElementById('ts-active-runs').textContent = 'Error';
        document.getElementById('ts-completed-today').textContent = '';
        document.getElementById('ts-total-runs').textContent = '';
        document.getElementById('ts-last-model').textContent = '';
        document.getElementById('ts-last-accuracy').textContent = '';
        document.getElementById('ts-last-loss').textContent = '';
        document.getElementById('ts-commit').textContent = '';
        document.getElementById('ts-timestamp').textContent = '';
        document.getElementById('ts-leaderboard').textContent = 'Error loading leaderboard';
      }
    }
    
    // Load training data on page load
    loadTraining();
    
    // Refresh training data every 30 seconds
    setInterval(loadTraining, 30000);
  </script>
</body>
</html>
