name: Mock Artifact Detection - Phase P0
description: 'Detect and fail on mock artifacts to enforce real compute only'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  MOCKS_DISABLED: 1
  CI_MOCK_DETECTION_ENABLED: 1
  CI_BUILD_FAIL_ON_MOCK: 1

jobs:
  mock-detection:
    name: Mock Artifact Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Mock Detection - TypeScript Files
        id: mock-ts
        run: |
          echo "=== Mock Detection: TypeScript Files ==="
          
          # Search for mock-related patterns in TypeScript files
          MOCK_PATTERNS=(
            "mock"
            "Mock"
            "MOCK"
            "fake"
            "Fake"
            "FAKE"
            "synthetic"
            "Synthetic"
            "SYNTHETIC"
            "simulated"
            "Simulated"
            "SIMULATED"
            "stub"
            "Stub"
            "STUB"
            "spy"
            "Spy"
            "SPY"
          )
          
          MOCK_FILES=()
          for pattern in "${MOCK_PATTERNS[@]}"; do
            while IFS= read -r -d '' file; do
              if [[ "$file" != *"test"* ]] && [[ "$file" != *"spec"* ]]; then
                MOCK_FILES+=("$file")
              fi
            done < <(find . -name "*.ts" -type f -print0 | xargs -0 grep -l "$pattern" 2>/dev/null || true)
          done
          
          if [ ${#MOCK_FILES[@]} -gt 0 ]; then
            echo "ðŸš¨ MOCK DETECTED in TypeScript files:"
            printf '%s\n' "${MOCK_FILES[@]}"
            echo "mock_detected=true" >> $GITHUB_OUTPUT
            echo "mock_files=${MOCK_FILES[*]}" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "âœ… No mocks detected in TypeScript files"
            echo "mock_detected=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Mock Detection - JavaScript Files
        id: mock-js
        run: |
          echo "=== Mock Detection: JavaScript Files ==="
          
          # Search for mock-related patterns in JavaScript files
          MOCK_PATTERNS=(
            "mock"
            "Mock"
            "MOCK"
            "fake"
            "Fake"
            "FAKE"
            "synthetic"
            "Synthetic"
            "SYNTHETIC"
            "simulated"
            "Simulated"
            "SIMULATED"
            "stub"
            "Stub"
            "STUB"
            "spy"
            "Spy"
            "SPY"
          )
          
          MOCK_FILES=()
          for pattern in "${MOCK_PATTERNS[@]}"; do
            while IFS= read -r -d '' file; do
              if [[ "$file" != *"test"* ]] && [[ "$file" != *"spec"* ]]; then
                MOCK_FILES+=("$file")
              fi
            done < <(find . -name "*.js" -type f -print0 | xargs -0 grep -l "$pattern" 2>/dev/null || true)
          done
          
          if [ ${#MOCK_FILES[@]} -gt 0 ]; then
            echo "ðŸš¨ MOCK DETECTED in JavaScript files:"
            printf '%s\n' "${MOCK_FILES[@]}"
            echo "mock_detected=true" >> $GITHUB_OUTPUT
            echo "mock_files=${MOCK_FILES[*]}" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "âœ… No mocks detected in JavaScript files"
            echo "mock_detected=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Mock Detection - Python Files
        id: mock-py
        run: |
          echo "=== Mock Detection: Python Files ==="
          
          # Search for mock-related patterns in Python files
          MOCK_PATTERNS=(
            "mock"
            "Mock"
            "MOCK"
            "fake"
            "Fake"
            "FAKE"
            "synthetic"
            "Synthetic"
            "SYNTHETIC"
            "simulated"
            "Simulated"
            "SIMULATED"
            "stub"
            "Stub"
            "STUB"
            "spy"
            "Spy"
            "SPY"
            "unittest.mock"
            "pytest-mock"
          )
          
          MOCK_FILES=()
          for pattern in "${MOCK_PATTERNS[@]}"; do
            while IFS= read -r -d '' file; do
              if [[ "$file" != *"test"* ]] && [[ "$file" != *"spec"* ]]; then
                MOCK_FILES+=("$file")
              fi
            done < <(find . -name "*.py" -type f -print0 | xargs -0 grep -l "$pattern" 2>/dev/null || true)
          done
          
          if [ ${#MOCK_FILES[@]} -gt 0 ]; then
            echo "ðŸš¨ MOCK DETECTED in Python files:"
            printf '%s\n' "${MOCK_FILES[@]}"
            echo "mock_detected=true" >> $GITHUB_OUTPUT
            echo "mock_files=${MOCK_FILES[*]}" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "âœ… No mocks detected in Python files"
            echo "mock_detected=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Mock Detection - Configuration Files
        id: mock-config
        run: |
          echo "=== Mock Detection: Configuration Files ==="
          
          # Check for mock-related environment variables
          if grep -r "MOCKS_ENABLED\|MOCK_MODE\|SYNTHETIC_MODE" . --include="*.env*" --include="*.yml" --include="*.yaml" --include="*.json" --include="*.toml" --include="*.ini" --include="*.cfg" 2>/dev/null; then
            echo "ðŸš¨ MOCK CONFIGURATION DETECTED in config files"
            echo "mock_detected=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "âœ… No mock configuration detected"
            echo "mock_detected=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Mock Detection - Dependencies
        id: mock-deps
        run: |
          echo "=== Mock Detection: Dependencies ==="
          
          # Check package.json for mock-related dependencies
          if [ -f "package.json" ]; then
            MOCK_DEPS=$(grep -E '"mock|"fake|"synthetic|"simulated' package.json || true)
            if [ -n "$MOCK_DEPS" ]; then
              echo "ðŸš¨ MOCK DEPENDENCIES DETECTED in package.json:"
              echo "$MOCK_DEPS"
              echo "mock_detected=true" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "âœ… No mock dependencies detected in package.json"
              echo "mock_detected=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Check requirements.txt for mock-related dependencies
          if [ -f "requirements.txt" ]; then
            MOCK_DEPS=$(grep -E "mock|fake|synthetic|simulated" requirements.txt || true)
            if [ -n "$MOCK_DEPS" ]; then
              echo "ðŸš¨ MOCK DEPENDENCIES DETECTED in requirements.txt:"
              echo "$MOCK_DEPS"
              echo "mock_detected=true" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "âœ… No mock dependencies detected in requirements.txt"
              echo "mock_detected=false" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Mock Detection - Import Statements
        id: mock-imports
        run: |
          echo "=== Mock Detection: Import Statements ==="
          
          # Check for mock-related imports in source files
          MOCK_IMPORTS=()
          
          # TypeScript/JavaScript imports
          while IFS= read -r -d '' file; do
            if [[ "$file" != *"test"* ]] && [[ "$file" != *"spec"* ]]; then
              IMPORTS=$(grep -E "import.*mock|import.*fake|import.*synthetic|import.*simulated" "$file" 2>/dev/null || true)
              if [ -n "$IMPORTS" ]; then
                MOCK_IMPORTS+=("$file: $IMPORTS")
              fi
            fi
          done < <(find . -name "*.ts" -o -name "*.js" -type f -print0)
          
          # Python imports
          while IFS= read -r -d '' file; do
            if [[ "$file" != *"test"* ]] && [[ "$file" != *"spec"* ]]; then
              IMPORTS=$(grep -E "import.*mock|import.*fake|import.*synthetic|import.*simulated|from.*mock|from.*fake|from.*synthetic|from.*simulated" "$file" 2>/dev/null || true)
              if [ -n "$IMPORTS" ]; then
                MOCK_IMPORTS+=("$file: $IMPORTS")
              fi
            fi
          done < <(find . -name "*.py" -type f -print0)
          
          if [ ${#MOCK_IMPORTS[@]} -gt 0 ]; then
            echo "ðŸš¨ MOCK IMPORTS DETECTED:"
            printf '%s\n' "${MOCK_IMPORTS[@]}"
            echo "mock_detected=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "âœ… No mock imports detected"
            echo "mock_detected=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Mock Detection - Function Calls
        id: mock-calls
        run: |
          echo "=== Mock Detection: Function Calls ==="
          
          # Check for mock-related function calls in source files
          MOCK_CALLS=()
          
          # TypeScript/JavaScript function calls
          while IFS= read -r -d '' file; do
            if [[ "$file" != *"test"* ]] && [[ "$file" != *"spec"* ]]; then
              CALLS=$(grep -E "mock\(|fake\(|synthetic\(|simulated\(|\.mock\(|\.fake\(|\.synthetic\(|\.simulated\(" "$file" 2>/dev/null || true)
              if [ -n "$CALLS" ]; then
                MOCK_CALLS+=("$file: $CALLS")
              fi
            fi
          done < <(find . -name "*.ts" -o -name "*.js" -type f -print0)
          
          # Python function calls
          while IFS= read -r -d '' file; do
            if [[ "$file" != *"test"* ]] && [[ "$file" != *"spec"* ]]; then
              CALLS=$(grep -E "mock\(|fake\(|synthetic\(|simulated\(|\.mock\(|\.fake\(|\.synthetic\(|\.simulated\(" "$file" 2>/dev/null || true)
              if [ -n "$CALLS" ]; then
                MOCK_CALLS+=("$file: $CALLS")
              fi
            fi
          done < <(find . -name "*.py" -type f -print0)
          
          if [ ${#MOCK_CALLS[@]} -gt 0 ]; then
            echo "ðŸš¨ MOCK FUNCTION CALLS DETECTED:"
            printf '%s\n' "${MOCK_CALLS[@]}"
            echo "mock_detected=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "âœ… No mock function calls detected"
            echo "mock_detected=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Mock Detection Summary
        id: mock-summary
        run: |
          echo "=== Mock Detection Summary ==="
          
          # Collect results from all detection steps
          TS_MOCK="${{ steps.mock-ts.outputs.mock_detected }}"
          JS_MOCK="${{ steps.mock-js.outputs.mock_detected }}"
          PY_MOCK="${{ steps.mock-py.outputs.mock_detected }}"
          CONFIG_MOCK="${{ steps.mock-config.outputs.mock_detected }}"
          DEPS_MOCK="${{ steps.mock-deps.outputs.mock_detected }}"
          IMPORTS_MOCK="${{ steps.mock-imports.outputs.mock_detected }}"
          CALLS_MOCK="${{ steps.mock-calls.outputs.mock_detected }}"
          
          TOTAL_MOCKS=0
          if [ "$TS_MOCK" = "true" ]; then TOTAL_MOCKS=$((TOTAL_MOCKS + 1)); fi
          if [ "$JS_MOCK" = "true" ]; then TOTAL_MOCKS=$((TOTAL_MOCKS + 1)); fi
          if [ "$PY_MOCK" = "true" ]; then TOTAL_MOCKS=$((TOTAL_MOCKS + 1)); fi
          if [ "$CONFIG_MOCK" = "true" ]; then TOTAL_MOCKS=$((TOTAL_MOCKS + 1)); fi
          if [ "$DEPS_MOCK" = "true" ]; then TOTAL_MOCKS=$((TOTAL_MOCKS + 1)); fi
          if [ "$IMPORTS_MOCK" = "true" ]; then TOTAL_MOCKS=$((TOTAL_MOCKS + 1)); fi
          if [ "$CALLS_MOCK" = "true" ]; then TOTAL_MOCKS=$((TOTAL_MOCKS + 1)); fi
          
          echo "Total mock detections: $TOTAL_MOCKS"
          
          if [ $TOTAL_MOCKS -gt 0 ]; then
            echo "ðŸš¨ MOCKS DETECTED - BUILD FAILED"
            echo "mock_detected=true" >> $GITHUB_OUTPUT
            echo "total_mocks=$TOTAL_MOCKS" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "âœ… NO MOCKS DETECTED - BUILD PASSED"
            echo "mock_detected=false" >> $GITHUB_OUTPUT
            echo "total_mocks=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Scope Compliance Report
        if: always()
        run: |
          echo "=== Scope Compliance Report ==="
          
          MOCK_DETECTED="${{ steps.mock-summary.outputs.mock_detected }}"
          TOTAL_MOCKS="${{ steps.mock-summary.outputs.total_mocks }}"
          
          echo "Scope Freeze Status: ACTIVE"
          echo "MOCKS_DISABLED: 1"
          echo "Mock Detection Enabled: true"
          echo "Build Fail on Mock: true"
          echo "Total Mock Detections: $TOTAL_MOCKS"
          
          if [ "$MOCK_DETECTED" = "true" ]; then
            echo "ðŸš¨ SCOPE VIOLATION DETECTED"
            echo "Build failed due to mock artifacts"
            echo "Scope compliance: FAILED"
          else
            echo "âœ… SCOPE COMPLIANCE VERIFIED"
            echo "No mock artifacts detected"
            echo "Scope compliance: PASSED"
          fi
          
          # Generate compliance report
          cat > scope-compliance-report.md << EOF
          # Scope Compliance Report
          
          **Date:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          **Build:** ${{ github.run_id }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Compliance Status
          
          - **Scope Freeze:** ACTIVE
          - **MOCKS_DISABLED:** 1
          - **Mock Detection:** ENABLED
          - **Build Fail on Mock:** ENABLED
          - **Total Mock Detections:** $TOTAL_MOCKS
          
          ## Result
          
          $(if [ "$MOCK_DETECTED" = "true" ]; then
            echo "ðŸš¨ SCOPE VIOLATION DETECTED"
            echo "Build failed due to mock artifacts"
            echo "Scope compliance: FAILED"
          else
            echo "âœ… SCOPE COMPLIANCE VERIFIED"
            echo "No mock artifacts detected"
            echo "Scope compliance: PASSED"
          fi)
          
          ## Next Steps
          
          $(if [ "$MOCK_DETECTED" = "true" ]; then
            echo "1. Remove all mock artifacts from codebase"
            echo "2. Ensure MOCKS_DISABLED=1 is enforced"
            echo "3. Re-run mock detection after fixes"
            echo "4. Verify scope compliance before merge"
          else
            echo "1. Continue with build process"
            echo "2. Maintain scope compliance"
            echo "3. Monitor for new mock introductions"
            echo "4. Regular scope compliance checks"
          fi)
          EOF
          
          echo "Compliance report generated: scope-compliance-report.md"
