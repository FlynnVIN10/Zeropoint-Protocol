name: Consensus Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  workflow_dispatch:

jobs:
  consensus-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch consensus votes
        id: fetch-consensus
        run: |
          # Fetch consensus data from API
          CONSENSUS_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            "${{ secrets.API_BASE_URL }}/v1/consensus/${{ github.event.pull_request.number }}")
          
          echo "consensus_response=$CONSENSUS_RESPONSE" >> $GITHUB_OUTPUT
          
          # Parse consensus status
          if echo "$CONSENSUS_RESPONSE" | jq -e '.status == "PASS"' > /dev/null; then
            echo "consensus_status=PASS" >> $GITHUB_OUTPUT
          elif echo "$CONSENSUS_RESPONSE" | jq -e '.status == "VETO"' > /dev/null; then
            echo "consensus_status=VETO" >> $GITHUB_OUTPUT
          else
            echo "consensus_status=PENDING" >> $GITHUB_OUTPUT
          fi

      - name: Check consensus labels
        id: check-labels
        run: |
          # Check for consensus labels
          if [[ "${{ github.event.pull_request.labels.*.name }}" == *"consensus-pass"* ]]; then
            echo "label_status=PASS" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.pull_request.labels.*.name }}" == *"consensus-veto"* ]]; then
            echo "label_status=VETO" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.pull_request.labels.*.name }}" == *"needs-consensus"* ]]; then
            echo "label_status=NEEDS_CONSENSUS" >> $GITHUB_OUTPUT
          else
            echo "label_status=NO_LABEL" >> $GITHUB_OUTPUT
          fi

      - name: Determine consensus result
        id: consensus-result
        run: |
          # Apply consensus logic: PASS if Human+any or 2/3
          API_STATUS="${{ steps.fetch-consensus.outputs.consensus_status }}"
          LABEL_STATUS="${{ steps.check-labels.outputs.label_status }}"
          
          if [[ "$API_STATUS" == "PASS" ]] || [[ "$LABEL_STATUS" == "PASS" ]]; then
            echo "final_status=PASS" >> $GITHUB_OUTPUT
            echo "status_description=Consensus PASS - Ready for merge" >> $GITHUB_OUTPUT
          elif [[ "$API_STATUS" == "VETO" ]] || [[ "$LABEL_STATUS" == "VETO" ]]; then
            echo "final_status=VETO" >> $GITHUB_OUTPUT
            echo "status_description=Consensus VETO - Blocked" >> $GITHUB_OUTPUT
          else
            echo "final_status=PENDING" >> $GITHUB_OUTPUT
            echo "status_description=Consensus pending - Awaiting votes" >> $GITHUB_OUTPUT
          fi

      - name: Post consensus status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Check if consensus status comment already exists
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('## Consensus Status')
            );
            
            const statusBody = `## Consensus Status
            
            **Status:** ${{ steps.consensus-result.outputs.final_status }}
            **Description:** ${{ steps.consensus-result.outputs.final_status_description }}
            
            **API Response:** ${{ steps.fetch-consensus.outputs.consensus_status }}
            **Label Status:** ${{ steps.check-labels.outputs.label_status }}
            
            **Timestamp:** ${new Date().toISOString()}
            **Workflow:** [Consensus Gate](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: statusBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: statusBody
              });
            }

      - name: Update PR status
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.consensus-result.outputs.final_status }}';
            const description = '${{ steps.consensus-result.outputs.final_status_description }}';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: status === 'PASS' ? 'success' : status === 'VETO' ? 'failure' : 'pending',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'Consensus Gate'
            });

  security-scan:
    runs-on: ubuntu-latest
    needs: consensus-check
    if: needs.consensus-check.outputs.final_status == 'PASS'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          echo "Running security scan for consensus-approved PR"
          # Add security scanning logic here
          # This could include: SAST, dependency scanning, secret detection, etc.

  quality-gate:
    runs-on: ubuntu-latest
    needs: [consensus-check, security-scan]
    if: needs.consensus-check.outputs.final_status == 'PASS'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests
        run: |
          echo "Running quality gates for consensus-approved PR"
          # Add test execution logic here
          # This could include: unit tests, integration tests, linting, etc.

      - name: Quality check
        run: |
          echo "Quality gates passed for consensus-approved PR"
