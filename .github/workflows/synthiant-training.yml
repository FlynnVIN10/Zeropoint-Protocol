name: Synthiant Training Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'iaai/train/**'
      - 'iaai/tinygrad/**'
      - 'iaai/config/train.yaml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'iaai/train/**'
      - 'iaai/tinygrad/**'
      - 'iaai/config/train.yaml'
  workflow_dispatch:
    inputs:
      training_type:
        description: 'Training type to run'
        required: true
        default: 'full'
        type: choice
        options:
          - 'quick'
          - 'full'
          - 'stress-test'

jobs:
  training-pipeline:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        framework: [tinygrad, pytorch]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r iaai/requirements.txt
        if [ "${{ matrix.framework }}" = "tinygrad" ]; then
          pip install tinygrad
        fi
        if [ "${{ matrix.framework }}" = "pytorch" ]; then
          pip install torch torchvision torchaudio
        fi
        
    - name: Run training pipeline
      run: |
        cd iaai
        python train/train_synthiant.py --config config/train.dev.yaml || python train/train_synthiant.py --config config/train.yaml
      env:
        TRAINING_FRAMEWORK: ${{ matrix.framework }}
        PYTHON_VERSION: ${{ matrix.python-version }}
        
    - name: Collect training metrics
      run: |
        cd iaai
        python -c "
        import json
        import os
        from pathlib import Path
        
        # Collect training results
        results = []
        for result_file in Path('artifacts/train').glob('*.json'):
            with open(result_file, 'r') as f:
                data = json.load(f)
                data['file'] = str(result_file)
                results.append(data)
        
        # Save aggregated metrics
        metrics = {
            'timestamp': '$(date -u +%Y-%m-%dT%H:%M:%SZ)',
            'framework': '${{ matrix.framework }}',
            'python_version': '${{ matrix.python-version }}',
            'total_runs': len(results),
            'results': results
        }
        
        with open('artifacts/train/metrics_${{ matrix.framework }}_${{ matrix.python-version }}.json', 'w') as f:
            json.dump(metrics, f, indent=2)
        "
        
    - name: Upload training artifacts
      uses: actions/upload-artifact@v4
      with:
        name: training-results-${{ matrix.framework }}-${{ matrix.python-version }}
        path: |
          iaai/artifacts/train/*.json
          iaai/artifacts/train/*.log
        
    - name: Update evidence tree
      run: |
        mkdir -p evidence/phase5/training
        cp iaai/artifacts/train/metrics_${{ matrix.framework }}_${{ matrix.python-version }}.json evidence/phase5/training/
        echo "Training pipeline completed for ${{ matrix.framework }} on Python ${{ matrix.python-version }}" >> evidence/phase5/training/training_log.txt
        
    - name: Training status check
      run: |
        cd iaai
        # Verify training completed successfully
        if [ -f "artifacts/train/metrics_${{ matrix.framework }}_${{ matrix.python-version }}.json" ]; then
          echo "✅ Training pipeline successful for ${{ matrix.framework }} on Python ${{ matrix.python-version }}"
          exit 0
        else
          echo "❌ Training pipeline failed for ${{ matrix.framework }} on Python ${{ matrix.python-version }}"
          exit 1
        fi
