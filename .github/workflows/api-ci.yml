name: API CI - Phase 14 Integration

on:
  push:
    branches: [ phase14-full-integration-retry, main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Run unit tests
      run: npm run test
    
    - name: Run API integration tests
      run: npm run test:api
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: postgres
        DB_NAME: test_db
    
    - name: Run end-to-end tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: postgres
        DB_NAME: test_db

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: |
        npm run start:prod &
        sleep 10
      env:
        NODE_ENV: production
        PORT: 3000
    
    - name: Run performance tests
      run: |
        # Test RAG endpoint performance (target: <200ms)
        echo "Testing RAG endpoint performance..."
        start_time=$(date +%s%N)
        curl -X POST http://localhost:3000/v1/generate/text \
          -H "Content-Type: application/json" \
          -d '{"prompt":"test query for RAG","context":{"conversation":[]}}' \
          -s > /dev/null
        end_time=$(date +%s%N)
        duration=$(( (end_time - start_time) / 1000000 ))
        echo "RAG endpoint response time: ${duration}ms"
        
        if [ $duration -gt 200 ]; then
          echo "❌ RAG endpoint exceeded 200ms target (${duration}ms)"
          exit 1
        else
          echo "✅ RAG endpoint within 200ms target (${duration}ms)"
        fi
        
        # Test training endpoint performance
        echo "Testing training endpoint performance..."
        start_time=$(date +%s%N)
        curl -X POST http://localhost:3000/v1/petals/train \
          -H "Content-Type: application/json" \
          -d '{"agentId":"test-agent","data":"test training data"}' \
          -s > /dev/null
        end_time=$(date +%s%N)
        duration=$(( (end_time - start_time) / 1000000 ))
        echo "Training endpoint response time: ${duration}ms"
        
        if [ $duration -gt 200 ]; then
          echo "❌ Training endpoint exceeded 200ms target (${duration}ms)"
          exit 1
        else
          echo "✅ Training endpoint within 200ms target (${duration}ms)"
        fi

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check for secrets in code
      run: |
        # Check for potential secrets in code
        if grep -r "password\|secret\|key\|token" src/ --exclude-dir=node_modules | grep -v "//\|/\*\|#"; then
          echo "⚠️  Potential secrets found in code"
          exit 1
        fi

  deployment-check:
    runs-on: ubuntu-latest
    needs: [test, performance, security]
    if: github.ref == 'refs/heads/phase14-full-integration-retry'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
    
    - name: Verify production build
      run: |
        # Check if all required files are present
        if [ ! -f "dist/main.js" ]; then
          echo "❌ Main application file missing"
          exit 1
        fi
        
        if [ ! -d "dist/services" ]; then
          echo "❌ Services directory missing"
          exit 1
        fi
        
        if [ ! -d "dist/controllers" ]; then
          echo "❌ Controllers directory missing"
          exit 1
        fi
        
        echo "✅ Production build verified"
    
    - name: Create deployment summary
      run: |
        echo "## Phase 14 Integration Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- TypeScript compilation: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- Unit tests: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- API integration tests: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- Performance tests: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- Security audit: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Ready for Production" >> $GITHUB_STEP_SUMMARY
        echo "- All endpoints functional" >> $GITHUB_STEP_SUMMARY
        echo "- Performance targets met" >> $GITHUB_STEP_SUMMARY
        echo "- Security checks passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** phase14-full-integration-retry" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY 