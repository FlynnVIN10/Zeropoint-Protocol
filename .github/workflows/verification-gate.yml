name: verification-gate
on:
  pull_request: { branches: [ main ] }
  push:        { branches: [ main ] }
  workflow_dispatch: {}
jobs:
  verify:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          npm i -g @lhci/cli@0.14.x
      - name: Probe endpoints
        run: |
          set -euo pipefail
          mkdir -p evidence_out
          probe(){ curl -sS -i "$1" | tee "evidence_out/$2.http" >/dev/null; }
          
          # Probe production endpoints with fallback to local
          echo "Probing production endpoints..."
          if curl -sS -I "https://zeropointprotocol.ai/api/healthz" | grep -qi '^HTTP/.* 200'; then
            probe https://zeropointprotocol.ai/api/healthz        api_healthz
            probe https://zeropointprotocol.ai/api/readyz         api_readyz
            probe https://zeropointprotocol.ai/status/version.json status_version_json
            probe https://zeropointprotocol.ai/status/synthients.json status_synthients_json
            probe https://zeropointprotocol.ai/status/health/      status_health
            probe https://zeropointprotocol.ai/status/ready/       status_ready
            probe https://zeropointprotocol.ai/status/version/     status_version
          else
            echo "Production endpoints not accessible, using local endpoints for validation"
            # Start a local Pages dev server to serve /public for header checks
            npx wrangler pages dev public --port=8788 --local &
            for i in {1..20}; do
              if curl -fsS "http://127.0.0.1:8788/status/version.json" >/dev/null 2>&1; then break; fi
              sleep 1
            done
            probe http://127.0.0.1:8788/api/healthz        api_healthz || true
            probe http://127.0.0.1:8788/api/readyz         api_readyz  || true
            probe http://127.0.0.1:8788/status/version.json status_version_json
            probe http://127.0.0.1:8788/status/synthients.json status_synthients_json || true
            probe http://127.0.0.1:8788/status/health/      status_health || true
            probe http://127.0.0.1:8788/status/ready/       status_ready || true
            probe http://127.0.0.1:8788/status/version/     status_version || true
          fi
      - name: Validate headers + JSON (robust)
        run: |
          set -euo pipefail
          # Hard requirements - endpoints must return 200
          grep -qi '^HTTP/.* 200' evidence_out/api_healthz.http
          grep -qi '^HTTP/.* 200' evidence_out/api_readyz.http
          grep -qi '^Content-Type: *application/json' evidence_out/status_version_json.http
          # Stage 2 endpoints - synthients status should return 200
          if [ -f evidence_out/status_synthients_json.http ]; then
            grep -qi '^HTTP/.* 200' evidence_out/status_synthients_json.http || echo "⚠️ Warning: synthients status endpoint not accessible"
          fi
          
          # Extract JSON body after the first blank line (handles CRLF)
          BODY=$(awk 'BEGIN{b=0} { if(b) print; if($0=="" || $0=="\r") {b=1}}' evidence_out/status_version_json.http)
          
          # Validate required fields - be flexible about missing fields during deployment
          echo "$BODY" | jq -e 'has("commit")' >/dev/null || echo "⚠️ Warning: commit field missing"
          echo "$BODY" | jq -e 'has("buildTime")' >/dev/null || echo "⚠️ Warning: buildTime field missing"
          echo "$BODY" | jq -e 'has("env")' >/dev/null || echo "⚠️ Warning: env field missing"
          
          # Soft header checks: pass if present on live OR declared in repo public/_headers
          warn_if_missing(){
            local header="$1"
            if grep -qi "^$header" evidence_out/status_version_json.http; then
              echo "✅ $header present on live"
            elif grep -qi "${header%:*}" public/_headers; then
              echo "⚠️ $header missing on live; policy present in public/_headers (deploy pending)"
            else
              echo "⚠️ Warning: $header missing on live and not declared in public/_headers"
            fi
          }
          warn_if_missing 'X-Content-Type-Options: *nosniff'
          warn_if_missing 'Cache-Control: *no-store'
          warn_if_missing 'Strict-Transport-Security:'
          warn_if_missing 'Content-Security-Policy:'
          warn_if_missing 'Referrer-Policy:'
          warn_if_missing 'Permissions-Policy:'
      - name: Lighthouse
        run: |
          mkdir -p lhci
          lhci autorun --collect.url=https://zeropointprotocol.ai/ \
                       --upload.target=filesystem --upload.outputDir=lhci || true

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verification-artifacts
          path: |
            evidence_out/**
            lhci/**
          if-no-files-found: warn

      - name: List artifact names
        if: always()
        run: echo "artifact=verification-artifacts"

      - name: Enforce Evidence Posting Requirements
        if: github.event_name == 'pull_request'
        run: |
          echo "=== EVIDENCE POSTING REQUIREMENTS CHECK ==="
          
          # Check if this is a PR
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "Not a PR, skipping evidence posting requirements"
            exit 0
          fi
          
          # Get PR number and check for evidence in PR description
          PR_NUMBER="${{ github.event.number }}"
          echo "Checking PR #$PR_NUMBER for evidence posting..."
          
          # Check if evidence directories exist for current commit
          COMMIT_SHA="${{ github.sha }}"
          SHORT_COMMIT=$(echo "$COMMIT_SHA" | cut -c1-8)
          
          echo "Checking for evidence directories for commit: $SHORT_COMMIT"
          
          # Check local evidence directory
          if [ -d "evidence/phase2/verify/$SHORT_COMMIT" ]; then
            echo "✅ Local evidence directory exists"
          else
            echo "❌ FAIL: Local evidence directory missing for commit $SHORT_COMMIT"
            echo "Evidence must be created before PR can be merged"
            exit 1
          fi
          
          # Check public evidence directory
          if [ -d "public/evidence/phase2/verify/$SHORT_COMMIT" ]; then
            echo "✅ Public evidence directory exists"
          else
            echo "❌ FAIL: Public evidence directory missing for commit $SHORT_COMMIT"
            echo "Evidence must be created before PR can be merged"
            exit 1
          fi
          
          # Verify evidence content
          if [ -f "evidence/phase2/verify/$SHORT_COMMIT/index.json" ]; then
            EVIDENCE_COMMIT=$(jq -r '.meta.commit' "evidence/phase2/verify/$SHORT_COMMIT/index.json")
            if [ "$EVIDENCE_COMMIT" = "$SHORT_COMMIT" ]; then
              echo "✅ Evidence content verified"
            else
              echo "❌ FAIL: Evidence commit mismatch: expected $SHORT_COMMIT, got $EVIDENCE_COMMIT"
              exit 1
            fi
          else
            echo "❌ FAIL: Evidence index.json missing"
            exit 1
          fi
          
          echo "✅ All evidence posting requirements met for PR #$PR_NUMBER"

      - name: Store evidence artifacts (no commit)
        if: success()
        run: |
          mkdir -p public/evidence/v19/curl
          cp evidence_out/*.http public/evidence/v19/curl/
          echo "Evidence artifacts stored locally - no commit to repository"
