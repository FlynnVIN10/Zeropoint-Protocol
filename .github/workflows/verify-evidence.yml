name: verify-evidence
on:
  pull_request:
  push:
    branches: [main]

jobs:
  build-and-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with: { node-version: '22' }

      - name: Install
        run: npm ci

      - name: Build (simulate Pages env)
        env:
          CF_PAGES_COMMIT_SHA: ${{ github.sha }}
          CF_PAGES_URL: https://zeropointprotocol.ai
          CF_PAGES_BRANCH: ${{ github.ref_name }}
          CF_PAGES_COMMIT_TIME: ${{ github.event.head_commit.timestamp || github.event.pull_request.updated_at || github.event.repository.pushed_at || '' }}
        run: npm run build

      - name: Assert evidence matches commit
        run: |
          SHORT=$(echo "${GITHUB_SHA}" | cut -c1-7)
          test -f public/status/version.json
          V=$(jq -r '.commit' public/status/version.json)
          test "$V" = "$SHORT"

          IDX="public/evidence/verify/${SHORT}/index.json"
          META="public/evidence/verify/${SHORT}/metadata.json"
          PROG="public/evidence/verify/${SHORT}/progress.json"
          PROV="public/evidence/verify/${SHORT}/provenance.json"

          for f in "$IDX" "$META" "$PROG" "$PROV"; do
            test -f "$f"
            jq -e --arg s "$SHORT" '._ as $o | .commit == $s' "$f" >/dev/null
          done

      - name: Fail if any stray evidence for other SHAs
        run: |
          SHORT=$(echo "${GITHUB_SHA}" | cut -c1-7)
          shopt -s nullglob
          # Check Stage 1 evidence directories
          for d in public/evidence/verify/*; do
            [ -d "$d" ] || continue
            base=$(basename "$d")
            if [ "$base" != "$SHORT" ]; then
              echo "Unexpected Stage 1 evidence dir: $d"
              exit 1
            fi
          done
          # Check Stage 2 evidence directories
          for d in public/evidence/phase2/verify/*; do
            [ -d "$d" ] || continue
            base=$(basename "$d")
            if [ "$base" != "$SHORT" ]; then
              echo "Unexpected Stage 2 evidence dir: $d"
              exit 1
            fi
          done

      - name: Assert JSON validity and no BOM
        run: |
          for f in $(git ls-files 'public/**/*.json'); do
            # No UTF-8 BOM
            if [ "$(xxd -p -l 3 "$f" 2>/dev/null)" = "efbbbf" ]; then
              echo "BOM in $f"; exit 1; fi
            # Valid JSON
            jq -e . "$f" >/dev/null
          done

      - name: Enforce short SHA in commit fields (verify dir only)
        run: |
          set -euo pipefail
          SHORT=$(git rev-parse --short=7 HEAD)
          # Check both Stage 1 and Stage 2 evidence directories
          mapfile -t files < <(find public/evidence/verify public/evidence/phase2/verify -type f -name '*.json' -print 2>/dev/null || true)
          [[ ${#files[@]} -gt 0 ]]
          for f in "${files[@]}"; do
            if jq -e 'has("commit")' "$f" >/dev/null; then
              jq -e --arg s "$SHORT" '(.commit|type)=="string" and (.commit|length)==7 and .commit==$s' "$f" >/dev/null
            fi
          done

      - name: Forbid hashed pages.dev URLs in evidence
        run: |
          ! grep -RIEo 'https://[-a-z0-9]\+\.pages\.dev/evidence' public/evidence || \
            (echo "Found hashed pages.dev refs" && exit 1)

      - name: Validate headers via local dev
        run: |
          npx wrangler pages dev public --port=8788 --local &
          sleep 5
          # Wait for server to be ready
          for i in {1..10}; do
            if curl -fsS "http://127.0.0.1:8788/status/version.json" >/dev/null 2>&1; then
              echo "Server is ready after $i attempts"
              break
            fi
            echo "Waiting for server to start... attempt $i"
            sleep 1
          done
          for path in /status/version.json /evidence/verify/$(git rev-parse --short=7 HEAD)/index.json; do
            curl -fsSIL "http://127.0.0.1:8788$path" | tee /tmp/h.txt
            grep -i '^content-type: application/json' /tmp/h.txt
            grep -i '^x-content-type-options: nosniff' /tmp/h.txt
            grep -i '^cache-control: no-store' /tmp/h.txt
          done

      - name: ISO8601Z timestamp
        run: |
          jq -e '(.timestamp|test("^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}Z$"))' public/status/version.json



