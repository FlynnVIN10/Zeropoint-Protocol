name: CI
on: [push, pull_request]
jobs:
  build-and-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '22' }
      - run: npm ci
      - name: Build (simulate Pages env)
        run: |
          export GITHUB_SHA="${GITHUB_SHA}"
          npm run build
      - name: Generate unified build metadata
        run: |
          set -euo pipefail
          SHORT="$(git rev-parse --short=8 HEAD)"
          BUILD_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "HEAD: $SHORT"
          echo "BUILD_TIME: $BUILD_TIME"
          
          # Read phase from centralized config (extract from TypeScript file)
          PHASE=$(grep -o '"current": *"[^"]*"' lib/phase-config.ts | cut -d'"' -f4 || echo "stage2")
          RAG_MODE=$(grep -o '"ragMode": *"[^"]*"' lib/phase-config.ts | cut -d'"' -f4 || echo "beyond")
          ENV=$(grep -o '"environment": *"[^"]*"' lib/phase-config.ts | cut -d'"' -f4 || echo "prod")
          
          echo "Phase: $PHASE"
          echo "RAG Mode: $RAG_MODE"
          echo "Environment: $ENV"
          
          # Generate unified build metadata
          cat > ci-build-meta.json << EOF
          {
            "commit": "$SHORT",
            "buildTime": "$BUILD_TIME",
            "phase": "$PHASE",
            "ragMode": "$RAG_MODE",
            "ciStatus": "green",
            "env": "$ENV"
          }
          EOF
          
          # Create evidence directories for current commit (both public and local)
          mkdir -p "public/evidence/$PHASE/verify/$SHORT"
          mkdir -p "evidence/$PHASE/verify/$SHORT"
          
          # Create evidence files with proper metadata
          EVIDENCE_DATA='{"meta":{"commit":"'$SHORT'","timestamp":"'$BUILD_TIME'","phase":"'$PHASE'","ragMode":"'$RAG_MODE'"},"status":"verified","endpoints":["/status/version.json","/status/synthients.json","/api/healthz","/api/readyz","/api/training","/api/proposals"]}'
          
          echo "$EVIDENCE_DATA" > "public/evidence/$PHASE/verify/$SHORT/index.json"
          echo "$EVIDENCE_DATA" > "evidence/$PHASE/verify/$SHORT/index.json"
          
          echo "Created evidence directories for commit: $SHORT"
      - name: Verify evidence matches commit
        run: |
          set -euo pipefail
          SHORT="$(git rev-parse --short=8 HEAD)"
          echo "HEAD: $SHORT"
          
          # Get phase from centralized config
          PHASE=$(grep -o '"current": *"[^"]*"' lib/phase-config.ts | cut -d'"' -f4 || echo "stage2")
          echo "Phase: $PHASE"
          
          # Verify evidence directories exist
          test -d "public/evidence/$PHASE/verify/$SHORT" || { echo "Missing public evidence directory for $SHORT"; exit 1; }
          test -d "evidence/$PHASE/verify/$SHORT" || { echo "Missing local evidence directory for $SHORT"; exit 1; }
          
          # Verify evidence content in both locations
          PUBLIC_COMMIT=$(jq -r '.meta.commit' "public/evidence/$PHASE/verify/$SHORT/index.json")
          LOCAL_COMMIT=$(jq -r '.meta.commit' "evidence/$PHASE/verify/$SHORT/index.json")
          
          test "$PUBLIC_COMMIT" = "$SHORT" || { echo "Public evidence commit mismatch: expected $SHORT got $PUBLIC_COMMIT"; exit 1; }
          test "$LOCAL_COMMIT" = "$SHORT" || { echo "Local evidence commit mismatch: expected $SHORT got $LOCAL_COMMIT"; exit 1; }
          
          echo "✅ Evidence verified for commit: $SHORT"
          echo "Public evidence:"
          ls -la public/evidence/$PHASE/verify
          echo "Local evidence:"
          ls -la evidence/$PHASE/verify
      - name: Verify build metadata
        run: |
          set -euo pipefail
          SHORT="$(git rev-parse --short=8 HEAD)"
          
          # Verify ci-build-meta.json exists and has correct format
          test -f ci-build-meta.json || { echo "Missing ci-build-meta.json"; exit 1; }
          
          # Verify commit matches
          META_COMMIT=$(jq -r .commit ci-build-meta.json)
          test "$META_COMMIT" = "$SHORT" || { echo "Metadata commit mismatch: expected $SHORT got $META_COMMIT"; exit 1; }
          
          # Verify buildTime format
          jq -e '.buildTime|test("Z$")' ci-build-meta.json || { echo "Invalid buildTime format"; exit 1; }
          
          echo "✅ Build metadata verified for commit: $SHORT"