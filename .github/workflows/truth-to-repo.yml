name: truth-to-repo
on:
  workflow_dispatch:
  push:
    branches: [ main ]
  # Temporarily disabled cron to prevent failures
  # schedule:
  #   - cron: '0 */4 * * *' # Run every 4 hours

jobs:
  verify-alignment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Basic repository checks
        run: |
          echo "=== Repository Structure Check ==="
          ls -la
          echo ""
          echo "=== README.md Check ==="
          head -10 README.md
          echo ""
          echo "=== Evidence Directory Check ==="
          PHASE=$(grep -o '"current": *"[^"]*"' lib/phase-config.ts | cut -d'"' -f4 || echo "stage2")
          echo "Phase: $PHASE"
          ls -la evidence/$PHASE/verify/${{ steps.head.outputs.head_commit }}/ || echo "Evidence directory not found"
          echo ""
          echo "=== Workflow Files Check ==="
          ls -la .github/workflows/

      - name: Determine repo HEAD commit
        id: head
        run: |
          echo "=== Determining repo HEAD commit ==="
          head_commit=$(git rev-parse --short=8 HEAD)
          echo "Repo HEAD: $head_commit"
          echo "head_commit=$head_commit" >> $GITHUB_OUTPUT

      - name: Test local evidence file
        run: |
          echo "=== Testing local evidence file ==="
          PHASE=$(grep -o '"current": *"[^"]*"' lib/phase-config.ts | cut -d'"' -f4 || echo "stage2")
          echo "Phase: $PHASE"
          if [ -f "evidence/$PHASE/verify/${{ steps.head.outputs.head_commit }}/index.json" ]; then
            echo "✅ Evidence file exists"
            if jq empty evidence/$PHASE/verify/${{ steps.head.outputs.head_commit }}/index.json 2>/dev/null; then
              echo "✅ Evidence file is valid JSON"
              jq '.meta.commit' evidence/$PHASE/verify/${{ steps.head.outputs.head_commit }}/index.json
            else
              echo "❌ Evidence file is not valid JSON"
              head -10 evidence/$PHASE/verify/${{ steps.head.outputs.head_commit }}/index.json
            fi
          else
            echo "❌ Evidence file does not exist"
            ls -la evidence/$PHASE/verify/ || echo "Directory listing failed"
          fi

      - name: Alignment check (HEAD vs live)
        if: ${{ env.STRICT_ALIGNMENT == '1' }}
        run: |
          echo "=== Alignment Check (HEAD vs live) ==="
          canon=${{ steps.head.outputs.head_commit }}
          echo "HEAD commit: $canon"
          live_commit=$(curl -s https://zeropointprotocol.ai/status/version.json | jq -r '.commit' 2>/dev/null || echo "")
          echo "Live commit: $live_commit"
          [ -n "$live_commit" ] || (echo "❌ Could not fetch live commit" && exit 1)
          if [ "$live_commit" = "$canon" ]; then
            echo "✅ Live commit matches HEAD"
          else
            echo "❌ Commit mismatch: expected $canon, got $live_commit" && exit 1
          fi
      - name: Alignment check (HEAD vs live, soft)
        if: ${{ env.STRICT_ALIGNMENT != '1' }}
        continue-on-error: true
        run: |
          echo "=== Alignment Check (soft mode) ==="
          canon=${{ steps.head.outputs.head_commit }}
          live_commit=$(curl -s https://zeropointprotocol.ai/status/version.json | jq -r '.commit' 2>/dev/null || echo "")
          if [ "$live_commit" = "$canon" ]; then
            echo "✅ Live commit matches HEAD"
          else
            echo "⚠️  Soft fail: commit mismatch (expected $canon, got $live_commit)"
          fi

      - name: Network connectivity test (optional)
        continue-on-error: true
        run: |
          echo "=== Network Connectivity Test ==="
          echo "Testing live site connectivity..."
          if curl -s --max-time 10 https://zeropointprotocol.ai/status/version.json > /dev/null 2>&1; then
            echo "✅ Live site is reachable"
            curl -s https://zeropointprotocol.ai/status/version.json | jq . 2>/dev/null || echo "⚠️  Version endpoint response not valid JSON"
          else
            echo "⚠️  Live site not reachable - skipping network checks"
          fi

      - name: Assert evidence JSON content-type (best-effort)
        run: |
          echo "=== Evidence Content-Type Check ==="
          PHASE=$(grep -o '"current": *"[^"]*"' lib/phase-config.ts | cut -d'"' -f4 || echo "stage2")
          echo "Phase: $PHASE"
          ct=$(curl -sI https://zeropointprotocol.ai/evidence/$PHASE/verify/${{ steps.head.outputs.head_commit }}/index.json | awk -F': ' 'tolower($1)=="content-type"{print tolower($2)}' | tr -d '\r')
          echo "Content-Type: $ct"
          echo "$ct" | grep -q "application/json" || (echo "❌ Evidence endpoint does not serve JSON" && exit 1)
          echo "✅ Evidence endpoint serves JSON"

      - name: Assert version.json values
        run: |
          echo "=== Version JSON Canonical Check ==="
          version_data=$(curl -s https://zeropointprotocol.ai/status/version.json)
          echo "Version data: $version_data"

          commit=$(echo "$version_data" | jq -r '.commit' 2>/dev/null || echo "")
          phase=$(echo "$version_data" | jq -r '.phase' 2>/dev/null || echo "")

          echo "Commit: $commit"
          echo "Phase: $phase"

          [ "$commit" = "${{ steps.head.outputs.head_commit }}" ] || (echo "❌ Commit mismatch: expected ${{ steps.head.outputs.head_commit }}, got $commit" && exit 1)
          
          # Get expected phase from centralized config
          EXPECTED_PHASE=$(grep -o '"current": *"[^"]*"' lib/phase-config.ts | cut -d'"' -f4 || echo "stage2")
          [ "$phase" = "$EXPECTED_PHASE" ] || (echo "❌ Phase mismatch: expected $EXPECTED_PHASE, got $phase" && exit 1)

          echo "✅ Version JSON canonical values verified"
